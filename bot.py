from loader import bot, dp, types, db
from utils.notify_admins import on_startup_notify, admin_notify, admin_cancel
from aiogram import executor
from utils.states import States
from filters import IsAdmin


async def on_startup(dp):
    import filters
    filters.setup(dp)
    await on_startup_notify('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    print('Bot start...')


async def check_username(message):
    if message.from_user.username != None:
        return f'@{message.from_user.username}'
    else:
        return f'{message.from_user.first_name}'


async def bars_setting(call):
    bars = db.bars_get()['name']
    card = db.user_get(call.from_user.id)['card']
    for i in range(len(bars)):
        bars[i]['count'] -= card[i]['count']
    db.bars_set(bars)


@dp.message_handler(commands=['start', 'menu'], state=None)
async def start(message):
    if message.chat.type == 'private':
        if not bool(db.user_get(message.from_user.id)):
            db.user_add(message)
    if len(db.user_get(message.from_user.id)['card']) == 0:
        await States.start.set()
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            f'üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'Start')
        markup.add(btn1)
        await bot.send_message(
            message.chat.id, 'üëã –ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å <b>Elf Bar</b>üí®\n\n'+'ü•á –£ –Ω–∞—Å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏.\n–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n'+'üòé –ü–æ –≥–æ—Ä–æ–¥—É –í–∞—Å–∏–ª—å–∫–æ–≤ –º–æ–∂–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä—è–º –ø–æ–¥ –¥–≤–µ—Ä—å.', reply_markup=markup)
    else:
        cards = db.user_get(message.from_user.id)['card']
        text = ''
        for card in cards:
            if card['count'] != 0:
                text += f'‚úÖ {card["name"]} - {card["count"]} —à—Ç.\n'
        await message.answer(f'üõçÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω–∞ —Å —ç–ª—å—Ñ–±–∞—Ä–∞–º–∏:\n{text}')


@dp.message_handler(commands='cancel', state=States.complite)
async def cancel(message):
    if message.chat.type == 'private':
        state = dp.current_state(
            chat=message.chat.id, user=message.from_user.id)
        bars = db.bars_get()['name']
        card = db.user_get(message.from_user.id)['card']
        for i in range(len(bars)):
            bars[i]['count'] += card[i]['count']
        db.card_edit(message.from_user.id, [])
        db.bars_set(bars)
        await on_startup_notify(f'{await check_username(message)} –æ—á–∏—Å—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É!')
        await bot.send_message(message.chat.id, 'üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())
        await state.finish()


@dp.message_handler(commands='cancel', state=None)
async def clear(message):
    db.card_edit(message.from_user.id, [])
    await bot.send_message(message.chat.id, 'üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(IsAdmin(), commands='setbars', state='*')
async def setbars(message):
    await States.setbars.set()
    await bot.send_message(message.chat.id, 'üìã –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ —ç–ª—å—Ñ–±–∞—Ä–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<i>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞ - [–∫–æ–ª-–≤–æ];</i>', reply_markup=types.ForceReply())


@dp.message_handler(IsAdmin(), commands='list', state='*')
async def list_bars(message):
    text = ''
    bars = db.bars_get()['name']
    for bar in bars:
        text += f'‚úÖ {bar["name"]} - {bar["count"]} —à—Ç.\n'
    await message.answer(f'üìã <b>–ö–∞—Ç–∞–ª–æ–≥ —ç–ª—å—Ñ–±–∞—Ä–æ–≤:</b>\n\n{text}')


@dp.message_handler(IsAdmin(), state=States.setbars)
async def get_bars(message):
    state = dp.current_state(
        chat=message.chat.id, user=message.from_user.id)
    await state.finish()
    data = message.text.split(';')
    bars = []
    for item in data:
        if item != '':
            elem = item.split('-')
            bars.append({'name': elem[0], 'count': int(elem[1])})
    db.bars_set(bars)
    await message.answer('‚úÖ –°–ø–∏—Å–æ–∫ —ç–ª—å—Ñ–±–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')


@dp.callback_query_handler(lambda callback_query: True, state=States.start)
async def bars_buttons(call):
    if call.data == 'Start':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    bars = db.bars_get()['name']
    if call.data == 'Order':
        await States.getting.set()
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            'üß≠ –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='Pickup')
        btn2 = types.InlineKeyboardButton('üì¶ –ö—É—Ä—å–µ—Ä', callback_data='Courier')
        markup.add(btn1, btn2)
        await bot.send_message(call.message.chat.id, 'ü§î –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=markup)
        return
    cards = db.user_get(call.from_user.id)['card']
    markup = types.InlineKeyboardMarkup()
    edit = 0
    text = ''
    if call.data.isnumeric():
        cards[int(call.data)]['count'] += 1
        db.card_edit(call.from_user.id, cards)
    if len(cards) == 0:
        for bar in bars:
            cards.append({'name': bar['name'], 'count': 0})
            db.card_edit(call.from_user.id, cards)
    else:
        edit += 1
    for i in range(len(bars)):
        if bars[i]['count'] - cards[i]["count"] > 0:
            markup.add(types.InlineKeyboardButton(
                f'{bars[i]["name"]} - {bars[i]["count"] - cards[i]["count"]} —à—Ç.', callback_data=i))
        if cards[i]['count'] > 0:
            text += f'{cards[i]["name"]} - {cards[i]["count"]} —à—Ç.\n'
    if edit == 0:
        await bot.send_message(call.message.chat.id,
                               'üòã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:', reply_markup=markup)
    else:
        markup.add(types.InlineKeyboardButton(
            'üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å', callback_data='Order'))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üòã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:\n–ö–æ—Ä–∑–∏–Ω–∞:\n{text}', reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: True, state=States.getting)
async def getting(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data == 'Courier':
        await States.phone.set()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(
            'üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
        markup.add(btn1)
        await bot.send_message(call.message.chat.id, 'üì± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.', reply_markup=markup)
    elif call.data == 'Pickup':
        await States.complite.set()
        card = db.user_get(call.from_user.id)['card']
        summ = 0
        text = ''
        for i in range(len(card)):
            if card[i]['count'] != 0:
                summ += card[i]['count']
                text += f'{card[i]["name"]} - {card[i]["count"]} —à—Ç.\n'
        await call.message.answer('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–ó–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–æ–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥–æ–∫ ‚Ññ11. –ü–µ—Ä–µ–¥ –ø—Ä–∏–±—ã—Ç–∏–µ–º –ø–æ –∞–¥—Ä–µ—Å—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏: @eva_elfbar –∏–ª–∏ @TTaRaDoKc.\n'+f'‚åö –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: c 10:00 –¥–æ 19:00.\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {summ * 300} –≥—Ä–Ω.\n–ö–æ—Ä–∑–∏–Ω–∞:\n{text}')
        await bars_setting(call)
        await admin_notify(f'–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑ –æ—Ç {await check_username(call)}.\n–°—É–º–º–∞: {summ*300}\n–ö–æ—Ä–∑–∏–Ω–∞:\n{text}\nID::{call.from_user.id}')


@dp.message_handler(content_types=types.message.ContentType.CONTACT, state=States.phone)
async def phone(message):
    await States.complite.set()
    card = db.user_get(message.from_user.id)['card']
    summ = 0
    text = ''
    for i in range(len(card)):
        summ += card[i]['count']
        if card[i]['count'] != 0:
            text += f'{card[i]["name"]} - {card[i]["count"]} —à—Ç.\n'
    phone = message.contact.phone_number
    await bot.send_message(
        message.chat.id, f'‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n'+f'‚åö –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 10:00 –¥–æ 19:00.\n–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏—Ç 20 –≥—Ä–∏–≤–µ–Ω.\n–°—É–º–º–∞: {summ*300+20} –≥—Ä–Ω.\n–ö–æ—Ä–∑–∏–Ω–∞:\n{text}', reply_markup=types.ReplyKeyboardRemove())
    await bars_setting(message)
    await admin_notify(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç {await check_username(message)}.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone}\n–°—É–º–º–∞: {summ*300+20}\n–ö–æ—Ä–∑–∏–Ω–∞:\n{text}\nID::{message.from_user.id}')


@dp.callback_query_handler(lambda callback_query: True, state=States.admin)
async def admin_card(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    data = call.data.split()
    if len(db.user_get(int(data[1]))['card']) != 0:
        if data[0] == 'Confirm':
            db.card_edit(int(data[1]), [])
        elif data[0] == 'Cancel':
            bars = db.bars_get()['name']
            card = db.user_get(int(data[1]))['card']
            for i in range(len(bars)):
                bars[i]['count'] += card[i]['count']
            db.card_edit(int(data[1]), [])
            db.bars_set(bars)
        state = dp.current_state(
            chat=int(data[1]), user=int(data[1]))
        await state.finish()
    else:
        await call.message.answer(
            '–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞, –∑–Ω–∞—á–∏—Ç –µ–≥–æ —É–∂–µ –ø—Ä–∏–Ω—è–ª –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω.')

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
